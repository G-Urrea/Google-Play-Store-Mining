reviews <- read.csv("dataset/extended_googleplaystore_user_reviews.csv")
summary(reviews)
print("Columnas : ", nrows(reviews))
print("Columnas : ", nrow(reviews))
print("Columnas : ", int(nrow(reviews)))
print("Columnas : ", nrow(reviews))
help(print)
print.default("Columnas : " + string(nrow(reviews)))
print.default("Columnas : " + String(nrow(reviews)))
print.default("Columnas : " + str(nrow(reviews)))
print.default("Columnas : ", nrow(reviews))
print.default("Columnas : ", 4)
print.default(paste("Columnas : ", nrow(reviews)))
print(paste("Columnas : ", nrow(reviews)))
print(paste("Columnas : ", ncol(reviews)))
print(paste("Filas : ", nrow(reviews)))
View(reviews)
head(reviews[1:3,])
head(reviews[,1:3])
library(dplyr)
reviews <- read.csv("dataset/extended_googleplaystore_user_reviews.csv", encoding = 'UTF-8')
print(paste("Columnas : ", ncol(reviews)))
print(paste("Filas : ", nrow(reviews)))
colnames(reviews)
reviews_filter1 <-reviews[,c(1:2,17:33)]
colnames(reviews_filter1)
sum(reviews_filter1$Translated_Review=="")
reviews_filter2 <- reviews_filter1[reviews_filter1$Translated_Review!="", ]
reviews_filter2 <- select(reviews_filter2, -c("sentiment_polarity_score", "sentiment_subjectivity_score"))
library(plyr)
osentiment <- count(reviews_filter2, c("original_Sentiment"))
barplot(osentiment$freq, names.arg=osentiment$original_Sentiment)
aggregate(original_Sentiment_Polarity ~ original_Sentiment, reviews_filter2, FUN = mean)
aggregate(original_Sentiment_Polarity ~ original_Sentiment, reviews_filter2, FUN = median)
aggregate(original_Sentiment_Polarity ~ original_Sentiment, reviews_filter2, FUN = sd)
aggregate(original_Sentiment_Subjectivity ~ original_Sentiment, reviews_filter2, FUN = mean)
aggregate(original_Sentiment_Subjectivity ~ original_Sentiment, reviews_filter2, FUN = median)
aggregate(original_Sentiment_Subjectivity ~ original_Sentiment, reviews_filter2, FUN = sd)
View(reviews_filter2)
head(reviews_filter1[, c("App", "sentiment_polarity_score","original_Sentiment_Polarity" )])
head(reviews_filter1[, c("App", "sentiment_polarity_score","original_Sentiment_Polarity", "sentiment_polarity", "sentiment_polarity_summarised", "original_Sentiment" )])
head(reviews_filter1[, c("App", "sentiment_subjectivity_score","original_Sentiment_Subjectivity", "sentiment_subjectivity", "sentiment_subjectivity_summarised")])
reviews_filter2 <- reviews_filter1[reviews_filter1$Translated_Review!="", ]
reviews_filter2 <- select(reviews_filter2,
-c("original_Sentiment_Polarity", "sentiment_polarity_summarised", "original_Sentiment",
"original_Sentiment_Subjectivity","sentiment_subjectivity_summarised",
"spelling_quality_summarised","ease_of_reading_summarised","grammar_check"))
head(reviews_filter2)
print(paste("Filas : ", nrow(reviews_filter2)))
print(paste("Columnas : ", ncol(reviews_filter2)))
print(paste("Filas después de la limpieza: ", nrow(reviews_filter2)))
print(paste("Columnas después de la limpieza: ", ncol(reviews_filter2)))
write.csv(reviews_filter2,"dataset_modificado\dataset-usuarios.csv", row.names = FALSE)
write.csv(reviews_filter2,"dataset_modificado\\dataset-usuarios.csv", row.names = FALSE)
write.csv(reviews_filter2,"dataset_modificado\\dataset-usuarios.csv", row.names = FALSE)
gps <- read.csv("dataset/extended_googleplaystore.csv")
View(gps)
gps <- read.csv("dataset_modificado/extended_googleplaystore.csv")
View(gps)
gps <- read.csv("dataset_modificado/extended_googleplaystore.csv")
user <- read.csv("dataset_modificado/extended_googleplaystore_user_reviews.csv")
View(user)
cat1 <- read.csv("dataset_modificado/Categories1.csv")
View(cat1)
cat1 <- read.csv("dataset_modificado/Categories1.csv")
cat2 <- read.csv("dataset_modificado/Categories2.csv")
View(cat2)
ex_GP<-read.csv("dataset/extended_googleplaystore.csv")
ex_GPur<-read.csv("dataset/extended_googleplaystore_user_reviews.csv")
#summary(ex_GP)
#summary(ex_GPur)
View(ex_GP)
cat1 <- read.csv("dataset_modificado/Categories1.csv")
cat2 <- read.csv("dataset_modificado/Categories2.csv")
ur <- read.csv("dataset_modificado/UserReview.csv")
View(ur)
cat1 <- read.csv("dataset_modificado/Categories1.csv")
cat2 <- read.csv("dataset_modificado/Categories2.csv")
gpur <- read.csv("dataset_modificado/GPUserReview.csv")
View(gpur)
library(reshape)
library(tidyverse)
ex_GP<-read.csv("dataset/extended_googleplaystore.csv", as.is = F)
ex_GPur<-read.csv("dataset_modificado/dataset-usuarios.csv", as.is = F)
ex_GP$App <- as.character(ex_GP$App)
ex_GPur$App <- as.character(ex_GPur$App)
ex_GPur$Translated_Review <- as.character(ex_GPur$Translated_Review)
par(mar=c(12, 3, 1, 1))
plot(ex_GP$Category..categorical., ex_GP$Rating, las=3)
#Eliminando las aplicaciones gratis, se nota más la diferencia de ratings por categoria
#par(mar=c(10, 3, 1, 1))
nofree_GP <- with(ex_GP, ex_GP[Price != 0.00,] )
plot(nofree_GP$Category..categorical., nofree_GP$Rating, las=3)
#Sin sorpresa, los juegos tienden a ser las apps más pesadas
par(mar=c(10, 3, 1, 1))
plot(ex_GP$Category..categorical., ex_GP$Size, las=3)
par(mar=c(10, 3, 1, 1))
price_GP <- with(ex_GP, ex_GP[Price != 0.00,] )
plot(price_GP$Category..categorical., price_GP$Price, las=3)
#Sin contar Apps ultra-caras, Apps de FINANCES y MEDICAL tienden a ser las más caras
price_GP2 <- with(ex_GP, ex_GP[Price != 0.00 & Price <=40.00,] )
plot(price_GP2$Category..categorical., price_GP2$Price, las=3)
#Aplicaciones ordenadas por precio/calidad(rating)
price_GP3 <- with(ex_GP, ex_GP[Price != 0.00 & Price <=40.00,] )
ggplot(price_GP3, aes(x=Price, y=Rating)) + geom_point()
#Aplicaciones ultra-caras no son necesariamente todas buenas
price_GP10 <- with(ex_GP, ex_GP[Price != 0.00 & Price >=40.00,] )
ggplot(price_GP10, aes(x=Price, y=Rating)) + geom_point()
#Tamaño apps vs Ratings
ggplot(price_GP, aes(x=Size, y=Rating)) + geom_point()
free_GP <- with(ex_GP, ex_GP[Price == 0.00,] )
ggplot(free_GP, aes(x=Size, y=Rating)) + geom_point()
installs_GP <- with(ex_GP, ex_GP[Reviews <= 20000,] )
ggplot(installs_GP, aes(x=Reviews, y=Rating)) + geom_point()
#free_GP <- with(ex_GP, ex_GP[Price == 0.00,] )
#ggplot(free_GP, aes(x=Size, y=Rating)) + geom_point()
str(users)
users <- read.csv("dataset_modificado/dataset-usuarios.csv", encoding="UTF-8")
str(users)
str(users[0,])
head(users)
library(dplyr)
numeric_atr <- users %>% dplyr::select(where(is.numeric))
head(numeric_atr)
corr(numeric_atr)
cor(numeric_atr)
View(users)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
head(osentiment)
#barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity)
library(plyr)
library(dplyr)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
head(osentiment)
#barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
head(osentiment)
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity)
View(osentiment)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, las=1)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, las=2)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, las=3)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, las=0)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, las=2)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
op <- par(mar = c(10,4,4,2) + 0.1)
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, las=2)
par(op)
help("barplot")
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, legend.text = "Hola",las=2)
par(op)
osentiment <- count(reviews_filter2, c("sentiment_polarity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(osentiment$freq, names.arg=osentiment$sentiment_polarity, legend.text = "Frecuencia",las=2)
par(op)
opolarity <- count(reviews_filter2, c("sentiment_polarity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(opolarity$freq, names.arg=opolarity$sentiment_polarity, legend.text = "Frecuencia",las=2)
par(op) # Se reinicia el tamaño de la ventana
osubjectivity <- count(reviews_filter2, c("sentiment_subjectivity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(osubjectivity$freq, names.arg=osubjectivity$sentiment_polarity, legend.text = "Frecuencia",las=2)
par(op) # Se reinicia el tamaño de la ventana
osubjectivity <- count(reviews_filter2, c("sentiment_subjectivity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(osubjectivity$freq, names.arg=osubjectivity$sentiment_subjectivity, legend.text = "Frecuencia",las=2)
par(op) # Se reinicia el tamaño de la ventana
opolarity <- count(reviews_filter2, c("sentiment_polarity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(opolarity$freq, names.arg=opolarity$sentiment_polarity, legend.text = "Frecuencia",las=2, main="Tipo de opiniones y su frecuencia")
par(op) # Se reinicia el tamaño de la ventana
osubjectivity <- count(reviews_filter2, c("sentiment_subjectivity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(osubjectivity$freq, names.arg=osubjectivity$sentiment_subjectivity, legend.text = "Frecuencia",las=2, main="Objetividad de las opiniones y su frecuencia")
par(op) # Se reinicia el tamaño de la ventana
str(users[0,])
ospelling <- count(reviews_filter2, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, legend.text = "Frecuencia",las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
ospelling <- count(reviews_filter2, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
ospelling <- count(reviews_filter2, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, ylabel="Frecuencia", las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
ospelling <- count(reviews_filter2, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, ylab="Frecuencia", las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
ospelling <- count(reviews_filter2, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.2) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, ylab="Frecuencia", las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
ospelling <- count(reviews_filter2, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, ylab="Frecuencia", las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
oreading <- count(reviews_filter2, c("ease_of_reading_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(oreading$freq, names.arg=oreading$ease_of_reading_quality, ylab="Frecuencia", las=2, main="Facilidad de lectura")
par(op) # Se reinicia el tamaño de la ventana
summary(users)
unique(reviews_filter2)
unique(reviews_filter2$ease_of_reading_quality)
unique(reviews_filter2$ease_of_reading_quality)
c((1,2))
unique(reviews_filter2$ease_of_reading_quality)
c(c(1, 2))
unique(reviews_filter2$ease_of_reading_quality)
c(c(1, 2), c(3,4))
unique(reviews_filter2$ease_of_reading_quality)
c(c(1, 2), c(3,4))[0]
unique(reviews_filter2$ease_of_reading_quality)
c(c(1, 2), c(3,4))[1]
unique(reviews_filter2$ease_of_reading_quality)
c(c(1, 2), c(3,4))[2]
unique(reviews_filter2$ease_of_reading_quality)
cc("Very Confusing":20, "Difficult" ,"Fairly Difficult","Standard","Fairly Easy","Easy", "Very Easy")
unique(reviews_filter2$ease_of_reading_quality)
c("Very Confusing":20, "Difficult" ,"Fairly Difficult","Standard","Fairly Easy","Easy", "Very Easy")
flesch <- function(score) {
# Función que retorna la facilidad de lectura en base al puntaje de flesch
calification <-""
v <-c("Very Confusing", "Difficult" ,"Fairly Difficult","Standard","Fairly Easy","Easy", "Very Easy")
if (score < 30){
calification <- v[1]
}
else if (score<50){
calification <- v[2]
}
else if (score<60){
calification <- v[3]
}
else if(score<70){
calification <-v[4]
}
else if(score<80){
calification <- v[5]
}
else if (score <90){
calification <- v[6]
}
else{
calification <-v[7]
}
return(calification)
}
flesch(35)
count(reviews_filter2, c("ease_of_reading_quality"))
reviews_filter2 <-flesch(reviews_filter2[reviews_filter2$ease_of_reading_quality])
flesch(reviews_filter2[reviews_filter2$ease_of_reading_quality])
flesch(reviews_filter2[reviews_filter2$ease_of_reading_quality, ])
(reviews_filter2[reviews_filter2$ease_of_reading_quality, ])
head((reviews_filter2[reviews_filter2$ease_of_reading_quality, ]))
head(aggregate(ease_of_reading_quality ~ ease_of_reading_score , reviews_filter2, FUN=flesch))
head(aggregate(ease_of_reading_score ~ ease_of_reading_quality , reviews_filter2, FUN=flesch))
head(aggregate(ease_of_reading_score ~ ease_of_reading_quality , reviews_filter2, FUN=flesch))
head(aggregate(ease_of_reading_quality <-ease_of_reading_score ~ ease_of_reading_quality , reviews_filter2, FUN=flesch))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="")
help(mutate)
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= flesch(ease_of_reading_score))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= sapply(ease_of_reading_quality, function(x) flesch(x))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= sapply(ease_of_reading_quality, function(x) flesch(x)))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= lapply(ease_of_reading_score, function(x) flesch(x)))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= apply(ease_of_reading_score, function(x) flesch(x)))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= apply(ease_of_reading_score, FUN = function(x) flesch(x)))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= apply(ease_of_reading_score, FUN = function(x){ flesch(x)}))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= apply(ease_of_reading_score, FUN = flesch(x)))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= apply(ease_of_reading_score, FUN = flesch))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= apply(ease_of_reading_score, FUN = flesch ))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= lapply(ease_of_reading_score, function(x) paste(flesch(x),"x", sep="")))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= lapply(ease_of_reading_score, function(x) paste(x,"x", sep="")))
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= lapply(ease_of_reading_score, function(x) flesch(x))[])
library(tidyverse)
reviews_filter2 %>%
filter (ease_of_reading_quality=="") %>%
mutate(ease_of_reading_quality= lapply(ease_of_reading_score, function(x) flesch(x)[]))
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
helpt(apply)
help(apply)
help(sapply)
help(apply)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
apply(test, c("ease_of_reading_score"), FUN=flesch)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
apply(test, c(3), FUN=flesch)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
apply(test, c(2), FUN=flesch)
help(sapply)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
lapply(test$ease_of_reading_score, function(x) flesch(x))
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
test$ease_of_reading_quality[] <- lapply(test$ease_of_reading_score, function(x) flesch(x))
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
test$ease_of_reading_quality[] <- lapply(test$ease_of_reading_score, function(x) flesch(x))
head(test)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
eorq[] <- lapply(test$ease_of_reading_score, function(x) flesch(x))
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
eorq = test$ease_of_reading_quality
eorq[] <- lapply(test$ease_of_reading_score, function(x) flesch(x))
test$ease_of_reading_quality<-eorq
head(test)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
eorq = test$ease_of_reading_quality
eorq[] <- lapply(test$ease_of_reading_score, function(x) flesch(x)[])
test$ease_of_reading_quality<-eorq
head(test)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
eorq = test$ease_of_reading_quality
eorq
eorq[] <- lapply(test$ease_of_reading_score, function(x) flesch(x)[])
test$ease_of_reading_quality<-eorq
head(test)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test)
eorq = test$ease_of_reading_quality
eorq
eorq[] <- sapply(test$ease_of_reading_score, function(x) flesch(x)[])
test$ease_of_reading_quality<-eorq
head(test)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test[test$ease_of_reading_quality=="",])
eorq = test$ease_of_reading_quality
eorq[] <- sapply(test$ease_of_reading_score, function(x) flesch(x)[])
test$ease_of_reading_quality<-eorq
head(test)
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test[test$ease_of_reading_quality=="",])
eorq = test$ease_of_reading_quality
eorq[] <- sapply(test$ease_of_reading_score, function(x) flesch(x)[])
test$ease_of_reading_quality<-eorq
head(test[test$ease_of_reading_quality=="",])
test <- select(reviews_filter2, c("App", "ease_of_reading_quality", "ease_of_reading_score"))
head(test[test$ease_of_reading_quality=="",])
head(test)
eorq = test$ease_of_reading_quality
eorq[] <- sapply(test$ease_of_reading_score, function(x) flesch(x)[])
test$ease_of_reading_quality<-eorq
head(test)
head(test[test$ease_of_reading_quality=="",])
head(reviews_filter2[reviews_filter2$ease_of_reading_quality=="",]) # Se muestran los datos faltantes
head(reviews_filter2)
eorq = reviews_filter2$ease_of_reading_quality
eorq <- sapply(reviews_filter2$ease_of_reading_score, function(x) flesch(x)[])
reviews_filter2t$ease_of_reading_quality<-eorq
head(reviews_filter2[reviews_filter2$ease_of_reading_quality=="",]) # Se muestran los datos faltantes
head(reviews_filter2)
eorq = reviews_filter2$ease_of_reading_quality
eorq <- sapply(reviews_filter2$ease_of_reading_score, function(x) flesch(x)[])
reviews_filter2$ease_of_reading_quality<-eorq
head(reviews_filter2)
head(reviews_filter2[reviews_filter2$ease_of_reading_quality=="",])
write.csv(reviews_filter2,"dataset_modificado\\dataset-usuarios.csv", row.names = FALSE)
View(users)
View(users)
users <- read.csv("dataset_modificado/dataset-usuarios.csv", encoding="UTF-8")
head(users)
str(users[0,])
summary(users)
opolarity <- count(users, c("sentiment_polarity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(opolarity$freq, names.arg=opolarity$sentiment_polarity, legend.text = "Frecuencia",las=2, main="Tipo de comentarios")
par(op) # Se reinicia el tamaño de la ventana
osubjectivity <- count(users, c("sentiment_subjectivity"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(osubjectivity$freq, names.arg=osubjectivity$sentiment_subjectivity, legend.text = "Frecuencia",las=2, main="Objetividad de los comentarios")
par(op) # Se reinicia el tamaño de la ventana
ospelling <- count(users, c("spelling_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(ospelling$freq, names.arg=ospelling$spelling_quality, ylab="Frecuencia", las=2, main="Calidad de redacción")
par(op) # Se reinicia el tamaño de la ventana
oreading <- count(users, c("ease_of_reading_quality"))
op <- par(mar = c(10,4,4,2) + 0.1) # Para que se vean los labels completos
barplot(oreading$freq, names.arg=oreading$ease_of_reading_quality, ylab="Frecuencia", las=2, main="Facilidad de lectura")
par(op) # Se reinicia el tamaño de la ventana
